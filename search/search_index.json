{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"synbconvert Azure Synapse Analytics uses notebooks for data preparation, data visualization, machine learning, and many other tasks. However, performing proper version control working with these notebooks is a pain. Merging long nested JSON documents with git is nearly impossible. If you would like to use Azure Synapse Analytics for large scale projects while compling with the standards of good software engineering, synbconvert may be the tool you are looking for. You will be able to develop code in your favorite IDE and colaborate with your team as usual. Features synbconvert is a simple command line tool and Python API to convert Python files to Azure Synapse Analytics notebooks and vice versa. The main features of the tool include: Lean annotation syntax for Python files Conversion of Python files to Azure Synapse Analytics notebooks based on annotations Conversion of Azure Synapse Analytics notebooks to annotated Python files Workflow Installation pip synbconvert releases are available as source packages and binary wheels. Before you install synbconvert and its dependencies, make sure that your pip, setuptools and wheel are up to date. When using pip it is generally recommended to install packages in a virtual environment to avoid modifying system state. You can install synbconvert with: $ pip install synbconvert","title":"Home"},{"location":"#synbconvert","text":"Azure Synapse Analytics uses notebooks for data preparation, data visualization, machine learning, and many other tasks. However, performing proper version control working with these notebooks is a pain. Merging long nested JSON documents with git is nearly impossible. If you would like to use Azure Synapse Analytics for large scale projects while compling with the standards of good software engineering, synbconvert may be the tool you are looking for. You will be able to develop code in your favorite IDE and colaborate with your team as usual.","title":"synbconvert"},{"location":"#features","text":"synbconvert is a simple command line tool and Python API to convert Python files to Azure Synapse Analytics notebooks and vice versa. The main features of the tool include: Lean annotation syntax for Python files Conversion of Python files to Azure Synapse Analytics notebooks based on annotations Conversion of Azure Synapse Analytics notebooks to annotated Python files","title":"Features"},{"location":"#workflow","text":"","title":"Workflow"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pip","text":"synbconvert releases are available as source packages and binary wheels. Before you install synbconvert and its dependencies, make sure that your pip, setuptools and wheel are up to date. When using pip it is generally recommended to install packages in a virtual environment to avoid modifying system state. You can install synbconvert with: $ pip install synbconvert","title":"pip"},{"location":"api/","text":"API Reference This page provides documentation for our Python API. SynapseNotebookConverter Bases: SynapseNotebookHandler , PythonFileHandler This class is responsible for converting Python files to Synapse notebooks and vice versa. convert Converts a source file into a target file. Parameters: Name Type Description Default source str The file to be converted. required target str The path of the resulting file. required convert_python_file_to_synapse_notebook Converts a Python file into a Synapse notebook. Parameters: Name Type Description Default python_file str The Python file to be converted. required notebook_file str The path of the resulting Synapse notebook. required convert_synapse_notebook_to_python_file Converts a Synapse notebook into a Python file. Parameters: Name Type Description Default notebook_file str The Synapse notebook to be converted. required python_file str The path of the resulting Python file. required","title":"API Reference"},{"location":"api/#api-reference","text":"This page provides documentation for our Python API.","title":"API Reference"},{"location":"api/#synbconvert.synbconvert.SynapseNotebookConverter","text":"Bases: SynapseNotebookHandler , PythonFileHandler This class is responsible for converting Python files to Synapse notebooks and vice versa.","title":"SynapseNotebookConverter"},{"location":"api/#synbconvert.synbconvert.SynapseNotebookConverter.convert","text":"Converts a source file into a target file. Parameters: Name Type Description Default source str The file to be converted. required target str The path of the resulting file. required","title":"convert()"},{"location":"api/#synbconvert.synbconvert.SynapseNotebookConverter.convert_python_file_to_synapse_notebook","text":"Converts a Python file into a Synapse notebook. Parameters: Name Type Description Default python_file str The Python file to be converted. required notebook_file str The path of the resulting Synapse notebook. required","title":"convert_python_file_to_synapse_notebook()"},{"location":"api/#synbconvert.synbconvert.SynapseNotebookConverter.convert_synapse_notebook_to_python_file","text":"Converts a Synapse notebook into a Python file. Parameters: Name Type Description Default notebook_file str The Synapse notebook to be converted. required python_file str The path of the resulting Python file. required","title":"convert_synapse_notebook_to_python_file()"},{"location":"cli/","text":"CLI Reference This page provides documentation for our command line tools. convert Command for converting Python files to Synapse notebooks and vice versa. Usage: convert [OPTIONS] Options: Name Type Description Default --source text The path to the file to be converted. None --target text The path of the resulting file. None --help boolean Show this message and exit. False","title":"CLI Reference"},{"location":"cli/#cli-reference","text":"This page provides documentation for our command line tools.","title":"CLI Reference"},{"location":"cli/#convert","text":"Command for converting Python files to Synapse notebooks and vice versa. Usage: convert [OPTIONS] Options: Name Type Description Default --source text The path to the file to be converted. None --target text The path of the resulting file. None --help boolean Show this message and exit. False","title":"convert"},{"location":"dev/","text":"Install from source synbconvert uses Poetry for dependency management and is packaged with PyInstaller . The minimal requirements for a developer workspace are Conda and Poetry . To install from source: $ git clone git@github.com:alpine-data/synbconvert.git $ cd synbconvert $ conda create -p ./env python = 3 .9 $ conda activate ./env $ poetry install Testing For testing we use Python Behave . To run the tests, use the poe test command. Code quality Code formatting and static code analysis can be executed with poe style .","title":"Development"},{"location":"dev/#install-from-source","text":"synbconvert uses Poetry for dependency management and is packaged with PyInstaller . The minimal requirements for a developer workspace are Conda and Poetry . To install from source: $ git clone git@github.com:alpine-data/synbconvert.git $ cd synbconvert $ conda create -p ./env python = 3 .9 $ conda activate ./env $ poetry install","title":"Install from source"},{"location":"dev/#testing","text":"For testing we use Python Behave . To run the tests, use the poe test command.","title":"Testing"},{"location":"dev/#code-quality","text":"Code formatting and static code analysis can be executed with poe style .","title":"Code quality"},{"location":"usage/","text":"Usage To convert a Python file to a valid Synapse notebook, the Python file can be augmented with different markers. If no marker is used, the content of the Python file is interpreted as a single code cell. Defining Code Cells Code cells are denoted by # nb--cell markers. All lines below the marker until the next marker are added to a code cell in the Synapse notebook. The lines above the fist marker are also added to a code cell. example_1.py import foo.bar # nb--cell print ( \"first cell logic\" ) # nb--cell print ( \"second cell logic\" ) The simple example above results in the following notebook: Exclude Lines To exclude lines from beeing executed in the Synapse notebook, enclose them in an opening # nb--ignore-begin and closing # nb--ignore-end marker. example_2.py # nb--ignore-begin print ( \"this code will not be executed in the notebook\" ) # nb--ignore-end Ignored code is added to the notebook as a hidden cell. After showing the cell content we notice that the code is commented out so it will not be executed. Moreover it contains a nb--ignore marker for reverse conversion. Hide Cells If you want cells to be executed but remain hidden in the notebook at the same time, use the marker nb--hidden . example_3.py \"\"\" import foo.bar # nb--hidden print(\"first hidden cell logic\") \"\"\" A hidden cell will be added to the notebook. However, compared to an ignored cell, after showing the cell content we notice that the code is not commented out so it will be executed. Markdown Markdown is not executed in the Python file but should be shown as formatted text in the Synapse notebook. To define markdown cells, use a docsting comment with a nb--markdown marker. example_3.py \"\"\"nb--markdown ## Markdown Heading These lines are not executed in the Python file, but shown as markdown in the Synapse notebook. \"\"\" The simple example above results in the following markdown cell: Include Files By converting, the content of imported modules is included in the Synapse notebook (works only with full relative imports). When converting the notebook back to a Python file, relatively imported modules are also written. example_4.py # these imports are included in the notebook from .some_module import * from .some_package.some_module import * from .some_package.some_sub_package.some_module import * # these imports are not included in the notebook from some_module import * # not relative from .some_module import some_method # not full from .some_module import SomeClass # not full This example includes a file \"example_5.py\" that imports from the module \"foo/bar.py\". example_5.py import .foo.bar # nb--cell print ( \"first cell logic\" ) foo/bar.py print ( \"imported content\" ) The resulting cells contain nb--import-begin and nb--import-end markers for reverse conversion.","title":"Usage"},{"location":"usage/#usage","text":"To convert a Python file to a valid Synapse notebook, the Python file can be augmented with different markers. If no marker is used, the content of the Python file is interpreted as a single code cell.","title":"Usage"},{"location":"usage/#defining-code-cells","text":"Code cells are denoted by # nb--cell markers. All lines below the marker until the next marker are added to a code cell in the Synapse notebook. The lines above the fist marker are also added to a code cell. example_1.py import foo.bar # nb--cell print ( \"first cell logic\" ) # nb--cell print ( \"second cell logic\" ) The simple example above results in the following notebook:","title":"Defining Code Cells"},{"location":"usage/#exclude-lines","text":"To exclude lines from beeing executed in the Synapse notebook, enclose them in an opening # nb--ignore-begin and closing # nb--ignore-end marker. example_2.py # nb--ignore-begin print ( \"this code will not be executed in the notebook\" ) # nb--ignore-end Ignored code is added to the notebook as a hidden cell. After showing the cell content we notice that the code is commented out so it will not be executed. Moreover it contains a nb--ignore marker for reverse conversion.","title":"Exclude Lines"},{"location":"usage/#hide-cells","text":"If you want cells to be executed but remain hidden in the notebook at the same time, use the marker nb--hidden . example_3.py \"\"\" import foo.bar # nb--hidden print(\"first hidden cell logic\") \"\"\" A hidden cell will be added to the notebook. However, compared to an ignored cell, after showing the cell content we notice that the code is not commented out so it will be executed.","title":"Hide Cells"},{"location":"usage/#markdown","text":"Markdown is not executed in the Python file but should be shown as formatted text in the Synapse notebook. To define markdown cells, use a docsting comment with a nb--markdown marker. example_3.py \"\"\"nb--markdown ## Markdown Heading These lines are not executed in the Python file, but shown as markdown in the Synapse notebook. \"\"\" The simple example above results in the following markdown cell:","title":"Markdown"},{"location":"usage/#include-files","text":"By converting, the content of imported modules is included in the Synapse notebook (works only with full relative imports). When converting the notebook back to a Python file, relatively imported modules are also written. example_4.py # these imports are included in the notebook from .some_module import * from .some_package.some_module import * from .some_package.some_sub_package.some_module import * # these imports are not included in the notebook from some_module import * # not relative from .some_module import some_method # not full from .some_module import SomeClass # not full This example includes a file \"example_5.py\" that imports from the module \"foo/bar.py\". example_5.py import .foo.bar # nb--cell print ( \"first cell logic\" ) foo/bar.py print ( \"imported content\" ) The resulting cells contain nb--import-begin and nb--import-end markers for reverse conversion.","title":"Include Files"}]}